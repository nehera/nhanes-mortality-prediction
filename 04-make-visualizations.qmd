---
title: "Visualize MTF Images"
author: "Aidan Neher"
format: html
editor: visual
---

## Load Images

```{r}

# Load packages
library(tidyverse)
library(reticulate) # We use reticulate to load numpy
np <- import("numpy")

# Use numpy module to load mtf images
mtf_images <- np$load("data/mtf_images_valid.npy")
mort_cov <- read.csv("data/mort_cov_valid.csv")
outcome_label <- ifelse(mort_cov$mortstat==1, "dead", "alive")
subject_keys <- mort_cov$SEQN

# Make heatmaps from matrices
make_mtf_heatmap <- function(image_matrix) {
  # Reshape `image_matrix` (240x240 matrix)
  image_data <- image_matrix %>%
    as.matrix() %>%
    as.table() %>%
    as.data.frame()
  colnames(image_data) <- c("x", "y", "value")
  # Make heatmap
  mtf_heatmap <- ggplot(image_data, 
                        aes(x = x, y = y, fill = value)) +
    geom_tile() +
    scale_fill_gradient(low = "blue", high = "red") +
    coord_fixed() +  # Keep aspect ratio fixed
    theme_minimal() +
    theme(axis.text = element_blank(),  # Hide axis text
          axis.ticks = element_blank(),  # Hide axis ticks
          axis.title = element_blank(),
          legend.position = "none") # Hide axis titles
  return(mtf_heatmap)
}
mtf_heatmaps <- apply(mtf_images, 1, make_mtf_heatmap)
# Save as images
set_label <- "valid"
for (i in 1:length(subject_keys)) {
  fname_i <- paste0("data/", set_label, "/", 
                    outcome_label[i], "/", 
                    subject_keys[i], ".png")
  ggsave(fname_i, mtf_heatmaps[[i]], 
         width = 20, height = 7, units = "cm")
}

```

Plot the unprocessed tseries:

```{r}

# Reshape data of interest for plotting
plot_df <- AC_wide[1:3, ] %>% pivot_longer(
    -observation_id, 
    names_to = "bin",
    values_to = "avg_activity"
  ) %>%
  mutate(bin = str_remove(bin, "bin_") %>% as.integer(),
         observation_id = as.factor(observation_id)) 

# Plot all tseris, colored by observation index
my_plot <- ggplot(plot_df, aes(x = bin, y = avg_activity, color = observation_id)) + 
  geom_line() +  
  labs(
    title = "Average Daily Activity by Subject ID",
    x = "Bin (6-minute intervals)",
    y = "Average Activity Level",
    color = "Subject ID"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = "bottom",
    legend.title.align = 0.5
  ) +
  scale_x_continuous(breaks = seq(0, 240, 20)) # Adjust x-axis ticks for better readability

# Print the plot
my_plot

# Write out the plot
ggsave("my_plot.jpeg", plot = my_plot, width = 8, height = 6, dpi = 300)

```
